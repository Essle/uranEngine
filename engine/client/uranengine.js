/**
 * uranEngine 2.0.0 (clientside)
 *
 * Движок для создания браузерных многопользовательских 2D игр.
 * Использует технологии Node.js, Socket.io, Canvas и позволяет Вам 
 * создать игру любого жанра, не имея глубоких знаний JavaScript.
 *
 * @author Essle Jaxcate <essle.55@yandex.ru>
 * @copyright 2014-2015 uranEngine, Inc. http://uranengine.ru
 * @license https://raw.githubusercontent.com/Essle/uranEngine/master/LICENSE
 */

 function frameLogger(){var e=Date.now();if(frames++,e>framesTime+1e3){var t=Math.ceil(1e3*frames/(e-framesTime)*100)/100;return framesTime=e,frames=0,t}return void 0}function renderScreen(e){if(canvas.core.clearRect(0,0,client.screen.size.width,client.screen.size.height),client.map.sprite.file)for(var t={},i=0;i<client.render.repeat.x;++i)for(var n=0;n<client.render.repeat.y;++n)t={x:i*client.map.sprite.size.width-client.screen.difference.x,y:n*client.map.sprite.size.height-client.screen.difference.y},t.x+client.map.sprite.size.width<=0||t.x>=client.screen.size.width||t.y+client.map.sprite.size.height<=0||t.y>=client.screen.size.height||canvas.core.drawImage(cache.sprites[client.map.sprite.file],0,0,client.map.sprite.size.width,client.map.sprite.size.height,t.x,t.y,client.map.sprite.size.width,client.map.sprite.size.height);for(var a=0;a<e.object.length;++a)canvas.core.globalAlpha=e.object[a].property.opacity,canvas.core.translate(e.object[a].property.position.x-client.screen.difference.x,e.object[a].property.position.y-client.screen.difference.y),canvas.core.rotate(e.object[a].data.angle),e.object[a].property.background&&(canvas.core.fillStyle=e.object[a].property.background,canvas.core.fillRect(-e.object[a].property.size.width/2,-e.object[a].property.size.height/2,e.object[a].property.size.width,e.object[a].property.size.height)),e.object[a].data.animate.animated?(canvas.core.drawImage(cache.sprites[e.object[a].data.animate.sprite],e.object[a].property.size.width*(e.object[a].data.animate.getFrame-1),0,cache.sprites[e.object[a].data.animate.sprite].width/e.object[a].data.animate.frames,cache.sprites[e.object[a].data.animate.sprite].height,-e.object[a].property.size.width/2,-e.object[a].property.size.height/2,e.object[a].property.size.width,e.object[a].property.size.height),e.object[a].data.animate.update++,e.object[a].data.animate.update==e.object[a].data.animate.pause&&(e.object[a].data.animate.getFrame==e.object[a].data.animate.frames?e.object[a].data.animate.infinity&&(e.object[a].data.animate.getFrame=1):e.object[a].data.animate.getFrame++,e.object[a].data.animate.update=0)):e.object[a].property.sprite&&canvas.core.drawImage(cache.sprites[e.object[a].property.sprite],-e.object[a].property.size.width/2,-e.object[a].property.size.height/2,e.object[a].property.size.width,e.object[a].property.size.height),canvas.core.rotate(-e.object[a].data.angle),canvas.core.translate(-(e.object[a].property.position.x-client.screen.difference.x),-(e.object[a].property.position.y-client.screen.difference.y)),e.object[a].data.polygons.points.length>2&&e.object[a].debug&&renderPolygons(e.object[a]);for(var a=0;a<e.hud.length;++a)canvas.core.globalAlpha=e.hud[a].property.opacity,canvas.core.translate(e.hud[a].property.position.x,e.hud[a].property.position.y),canvas.core.rotate(e.hud[a].data.angle),e.hud[a].property.background&&(canvas.core.fillStyle=e.hud[a].property.background,canvas.core.fillRect(-e.hud[a].data.startLeft,-e.hud[a].data.size.height/2,e.hud[a].data.size.width,e.hud[a].data.size.height)),e.hud[a].property.sprite&&canvas.core.drawImage(cache.sprites[e.hud[a].property.sprite],-e.hud[a].data.startLeft,-e.hud[a].data.size.height/2,e.hud[a].data.size.width,e.hud[a].data.size.height),canvas.core.textAlign=e.hud[a].property.align,canvas.core.font=e.hud[a].property.textStyle+" "+e.hud[a].property.textSize+"px "+e.hud[a].property.textFont,canvas.core.fillStyle=e.hud[a].property.textColor,canvas.core.fillText(e.hud[a].property.text,e.hud[a].data.textStartLeft,e.hud[a].property.textSize*settings.fontheight/2<<0),canvas.core.rotate(-e.hud[a].data.angle),canvas.core.translate(-e.hud[a].property.position.x,-e.hud[a].property.position.y),e.hud[a].data.polygons.points.length>2&&e.hud[a].debug&&renderPolygons(e.hud[a])}function sendControllerKeys(){for(var e=0;e<keys.length;++e)socket.emit("controller",{key:"onPlayerKeyHold",params:[keys[e]]})}function controllerInit(){function e(){keys=[]}function t(e){e.preventDefault();var t={mousedown:"onPlayerMouseDown",mouseup:"onPlayerMouseUp",mousemove:"onPlayerMouseMove",click:"onPlayerMouseClicked",contextmenu:"onPlayerMouseClickedRight"};socket.emit("controller",{key:t[e.type],params:[{x:e.pageX-canvas.init.offsetLeft+client.screen.difference.x,y:e.pageY-canvas.init.offsetTop+client.screen.difference.y},{x:e.pageX-canvas.init.offsetLeft,y:e.pageY-canvas.init.offsetTop}]})}window.addEventListener("contextmenu",e),window.addEventListener("blur",e),document.addEventListener("keydown",function(e){-1==keys.indexOf(e.keyCode)&&(keys[keys.length]=e.keyCode,socket.emit("controller",{key:"onPlayerKeyDown",params:[e.keyCode]}))}),document.addEventListener("keyup",function(e){-1!=keys.indexOf(e.keyCode)&&(keys.splice(keys.indexOf(e.keyCode),1),socket.emit("controller",{key:"onPlayerKeyUp",params:[e.keyCode]}))}),canvas.init.addEventListener("mousedown",t),canvas.init.addEventListener("mouseup",t),canvas.init.addEventListener("mousemove",t),canvas.init.addEventListener("click",t),canvas.init.addEventListener("contextmenu",t)}function cacheGameData(e){for(var t=0;t<e.sprites.length;++t)cache.sprites[e.sprites[t]]=new Image,cache.sprites[e.sprites[t]].src="/game/sprites/"+e.sprites[t],cache.sprites[e.sprites[t]].onerror=function(){delete cache.sprites[e.sprites[t]]};for(var t=0;t<e.sounds.length;++t)cache.sounds[e.sounds[t]]=new Audio,cache.sounds[e.sounds[t]].src="/game/sounds/"+e.sounds[t],cache.sounds[e.sounds[t]].onerror=function(){delete cache.sounds[e.sounds[t]]}}function renderPolygons(e){canvas.core.strokeStyle="#ff0000",canvas.core.beginPath();for(var t=0;t<e.data.polygons.points.length-1;++t)canvas.core.moveTo(e.data.polygons.points[t][0]-client.screen.difference.x,e.data.polygons.points[t][1]-client.screen.difference.y),canvas.core.lineTo(e.data.polygons.points[t+1][0]-client.screen.difference.x,e.data.polygons.points[t+1][1]-client.screen.difference.y);canvas.core.stroke()}function updateScreenDifference(){client.screen.difference={x:client.screen.position.x-canvas.init.width/2,y:client.screen.position.y-canvas.init.height/2}}function updateMapRender(){client.render={repeat:{x:client.map.sprite.size.width<client.map.size.width?Math.ceil(client.map.size.width/client.map.sprite.size.width):1,y:client.map.sprite.size.height<client.map.size.height?Math.ceil(client.map.size.height/client.map.sprite.size.height):1},cut:{local:{x:client.map.sprite.size.width<client.map.size.width?0:client.map.sprite.size.width-client.map.size.width,y:client.map.sprite.size.height<client.map.size.height?0:client.map.sprite.size.height-client.map.size.height},repeat:{x:client.map.sprite.size.width<client.map.size.width?client.map.size.width%client.map.sprite.size.width:client.map.sprite.size.width-client.map.size.width,y:client.map.sprite.size.height<client.map.size.height?client.map.size.height%client.map.sprite.size.height:client.map.sprite.size.height-client.map.size.height}}}}var cache={sprites:[],sounds:[]},canvas={init:null,core:null,fps:null},keys=[],settings={},client={socket:null,scene:null,screen:{size:{width:0,height:0},difference:{x:0,y:0},position:{x:0,y:0}},map:{sprite:{file:null,size:{width:0,height:0}},size:{width:0,height:0}},render:{repeat:{x:1,y:1},cut:{local:{x:0,y:0},repeat:{x:0,y:0}}}},frames=0,framesTime=Date.now(),socket=io.connect();socket.on("onPlayerConnect",function(e){return client.socket=e.id,(canvas.init=document.getElementById("uranEngine"))?(canvas.fps=document.getElementById("fps"),settings=e.settings,canvas.core=canvas.init.getContext("2d"),canvas.core.textBaseline=settings.baseline,canvas.core.lineWidth=settings.linewidth,canvas.core.strokeStyle=settings.strokecolor,cacheGameData(e.cache),void controllerInit()):void console.error("Canvas с id `uranEngine` не найден")}).on("sendMainPackage",function(e){if(client.scene){if(canvas.fps){var t=frameLogger();t&&(canvas.fps.innerHTML="FPS: "+t)}renderScreen(JSON.parse(e)),sendControllerKeys()}}).on("setCursor",function(e){canvas.init.style.cursor=e}).on("playSound",function(e){cache.sounds[e.file].volume=e.volume,cache.sounds[e.file].load(),cache.sounds[e.file].play()}).on("setScene",function(e){function t(t){client.map={sprite:{file:e.map.sprite,size:{width:this.width||t.width,height:this.height||t.height}},size:e.map.size},updateMapRender()}canvas.init.width=e.screen.size.width,canvas.init.height=e.screen.size.height,client.scene=e.scene,client.screen=e.screen,e.map.sprite&&(cache.sprites[e.map.sprite].complete?t(cache.sprites[e.map.sprite]):cache.sprites[e.map.sprite].onload=t),updateScreenDifference()}).on("setMapSprite",function(e){cache.sprites[e].onload=function(){client.map={sprite:{file:e,size:{width:this.width,height:this.height}},size:data.map.size},updateMapRender()}}).on("setMapSize",function(e){client.map.size=e,client.map.sprite.file&&updateMapRender()}).on("setScreenSize",function(e){canvas.init.width=e.width,canvas.init.height=e.height,client.screen.size=e,updateScreenDifference()}).on("setScreenPosition",function(e){client.screen.position=e,updateScreenDifference()});